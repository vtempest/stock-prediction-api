"use strict";(self.webpackChunkdocusaurus_openapi_typedoc=self.webpackChunkdocusaurus_openapi_typedoc||[]).push([["435"],{4614:function(e,n,i){i.r(n),i.d(n,{frontMatter:()=>c,default:()=>h,toc:()=>o,metadata:()=>r,assets:()=>a,contentTitle:()=>l});var r=JSON.parse('{"id":"research/Weighted_Ensemble_Improvements","title":"Weighted Ensemble Improvements","description":"Overview","source":"@site/docs/research/Weighted_Ensemble_Improvements.md","sourceDirName":"research","slug":"/research/Weighted_Ensemble_Improvements","permalink":"/research/Weighted_Ensemble_Improvements","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"default","previous":{"title":"Variables in Biogas Prediction (Case Studies)","permalink":"/research/Variables Biogas Output"},"next":{"title":"XGBoost Params","permalink":"/research/XGBoost Params"}}'),s=i(5893),t=i(65);let c={},l="Weighted Ensemble Improvements",a={},o=[{value:"Overview",id:"overview",level:2},{value:"Key Improvements",id:"key-improvements",level:2},{value:"1. <strong>Dynamic Accuracy-Based Weighting</strong>",id:"1-dynamic-accuracy-based-weighting",level:3},{value:"2. <strong>Prophet Priority</strong>",id:"2-prophet-priority",level:3},{value:"3. <strong>Cross-Validation Weight Determination</strong>",id:"3-cross-validation-weight-determination",level:3},{value:"4. <strong>Dynamic Softmax Weight Calculation</strong>",id:"4-dynamic-softmax-weight-calculation",level:3},{value:"New Functions",id:"new-functions",level:2},{value:"<code>create_weighted_ensemble_model(train_df, config, cv_splits=None)</code>",id:"create_weighted_ensemble_modeltrain_df-config-cv_splitsnone",level:3},{value:"<code>predict_weighted_ensemble(ensemble_dict, features_df, prophet_predictions=None, prophet_accuracy=None)</code>",id:"predict_weighted_ensembleensemble_dict-features_df-prophet_predictionsnone-prophet_accuracynone",level:3},{value:"Benefits",id:"benefits",level:2},{value:"1. <strong>Performance Improvement</strong>",id:"1-performance-improvement",level:3},{value:"2. <strong>Robustness</strong>",id:"2-robustness",level:3},{value:"3. <strong>Transparency</strong>",id:"3-transparency",level:3},{value:"4. <strong>Flexibility</strong>",id:"4-flexibility",level:3},{value:"Example Output",id:"example-output",level:2},{value:"Implementation Details",id:"implementation-details",level:2},{value:"Weight Calculation Process",id:"weight-calculation-process",level:3},{value:"Prophet Priority Mechanism",id:"prophet-priority-mechanism",level:3},{value:"Error Handling",id:"error-handling",level:3},{value:"Performance Considerations",id:"performance-considerations",level:3},{value:"Usage",id:"usage",level:2},{value:"Testing",id:"testing",level:2},{value:"Future Enhancements",id:"future-enhancements",level:2}];function d(e){let n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"weighted-ensemble-improvements",children:"Weighted Ensemble Improvements"})}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsxs)(n.p,{children:["The ensemble training method has been significantly improved by implementing a ",(0,s.jsx)(n.strong,{children:"dynamic weighted ensemble approach"})," that uses cross-validation accuracy scores to determine optimal weights for each model's contribution to the final prediction. Prophet is given priority and receives the highest weight among all models."]}),"\n",(0,s.jsx)(n.h2,{id:"key-improvements",children:"Key Improvements"}),"\n",(0,s.jsxs)(n.h3,{id:"1-dynamic-accuracy-based-weighting",children:["1. ",(0,s.jsx)(n.strong,{children:"Dynamic Accuracy-Based Weighting"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Before"}),": Static split ",(0,s.jsx)(n.code,{children:"0.25 * prophet + 0.75 * (weighted_ml_models)"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"After"}),": Dynamic weighting based on all models' accuracy scores"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Formula"}),": ",(0,s.jsx)(n.code,{children:"softmax([prophet_accuracy, rf_accuracy, ridge_accuracy, xgb_accuracy])"})]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"2-prophet-priority",children:["2. ",(0,s.jsx)(n.strong,{children:"Prophet Priority"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Prophet is placed first in the accuracy array to ensure it gets the highest weight"}),"\n",(0,s.jsx)(n.li,{children:"Even with lower accuracy, Prophet maintains priority over ML models"}),"\n",(0,s.jsx)(n.li,{children:"This leverages Prophet's strengths in time series forecasting"}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"3-cross-validation-weight-determination",children:["3. ",(0,s.jsx)(n.strong,{children:"Cross-Validation Weight Determination"})]}),"\n",(0,s.jsx)(n.p,{children:"The new approach:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Performs time series cross-validation on each model"}),"\n",(0,s.jsx)(n.li,{children:"Calculates accuracy scores (100 - MAPE) for each fold"}),"\n",(0,s.jsx)(n.li,{children:"Averages accuracy scores across all folds"}),"\n",(0,s.jsx)(n.li,{children:"Uses softmax function to convert all accuracies to weights"}),"\n",(0,s.jsx)(n.li,{children:"Ensures weights sum to 1 and are all positive"}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"4-dynamic-softmax-weight-calculation",children:["4. ",(0,s.jsx)(n.strong,{children:"Dynamic Softmax Weight Calculation"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# Convert all accuracies to weights using softmax\nall_accuracies = np.array([prophet_accuracy, rf_accuracy, ridge_accuracy, xgb_accuracy])\nexp_accuracies = np.exp(all_accuracies)\ndynamic_weights = exp_accuracies / np.sum(exp_accuracies)\n\n# Prophet gets highest weight due to position in array\nprophet_weight = dynamic_weights[0]\nrf_weight = dynamic_weights[1]\nridge_weight = dynamic_weights[2]\nxgb_weight = dynamic_weights[3]\n"})}),"\n",(0,s.jsx)(n.h2,{id:"new-functions",children:"New Functions"}),"\n",(0,s.jsx)(n.h3,{id:"create_weighted_ensemble_modeltrain_df-config-cv_splitsnone",children:(0,s.jsx)(n.code,{children:"create_weighted_ensemble_model(train_df, config, cv_splits=None)"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Creates ensemble model with weights determined by CV accuracy"}),"\n",(0,s.jsx)(n.li,{children:"Returns models, scaler, features, weights, and CV scores"}),"\n",(0,s.jsx)(n.li,{children:"Performs cross-validation internally if splits not provided"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"predict_weighted_ensembleensemble_dict-features_df-prophet_predictionsnone-prophet_accuracynone",children:(0,s.jsx)(n.code,{children:"predict_weighted_ensemble(ensemble_dict, features_df, prophet_predictions=None, prophet_accuracy=None)"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Makes weighted ensemble predictions using dynamic accuracy-based weights"}),"\n",(0,s.jsx)(n.li,{children:"Returns ensemble predictions and individual model predictions"}),"\n",(0,s.jsx)(n.li,{children:"Requires Prophet accuracy for dynamic weighting"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"benefits",children:"Benefits"}),"\n",(0,s.jsxs)(n.h3,{id:"1-performance-improvement",children:["1. ",(0,s.jsx)(n.strong,{children:"Performance Improvement"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Better performing models get higher weights"}),"\n",(0,s.jsx)(n.li,{children:"Poorer performing models get lower weights but still contribute"}),"\n",(0,s.jsx)(n.li,{children:"Prophet gets priority due to its time series expertise"}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"2-robustness",children:["2. ",(0,s.jsx)(n.strong,{children:"Robustness"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Weights are determined by cross-validation, not overfitting"}),"\n",(0,s.jsx)(n.li,{children:"All models contribute to some degree (no zero weights)"}),"\n",(0,s.jsx)(n.li,{children:"Handles cases where one model significantly outperforms others"}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"3-transparency",children:["3. ",(0,s.jsx)(n.strong,{children:"Transparency"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Weights are clearly reported and stored"}),"\n",(0,s.jsx)(n.li,{children:"CV accuracy scores are available for analysis"}),"\n",(0,s.jsx)(n.li,{children:"Individual model contributions are tracked"}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"4-flexibility",children:["4. ",(0,s.jsx)(n.strong,{children:"Flexibility"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Easy to add/remove models from ensemble"}),"\n",(0,s.jsx)(n.li,{children:"Weights automatically adjust based on performance"}),"\n",(0,s.jsx)(n.li,{children:"Prophet maintains priority regardless of performance"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"example-output",children:"Example Output"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Cross-validation accuracy scores:\nRandom Forest: 85.23%\nRidge Regression: 82.45%\nXGBoost: 87.12%\nProphet: 89.34%\n\nDynamic accuracy-based weights:\nProphet: 0.312 (Accuracy: 89.34%)\nRandom Forest: 0.284 (Accuracy: 85.23%)\nRidge Regression: 0.268 (Accuracy: 82.45%)\nXGBoost: 0.136 (Accuracy: 87.12%)\n\nFinal ensemble weights:\nProphet: 0.312 (highest weight due to priority)\nRandom Forest: 0.284\nRidge Regression: 0.268\nXGBoost: 0.136\n"})}),"\n",(0,s.jsx)(n.h2,{id:"implementation-details",children:"Implementation Details"}),"\n",(0,s.jsx)(n.h3,{id:"weight-calculation-process",children:"Weight Calculation Process"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Cross-validation"}),": Train each model on CV folds"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Accuracy calculation"}),": ",(0,s.jsx)(n.code,{children:"accuracy = 100 - MAPE"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Array ordering"}),": ",(0,s.jsx)(n.code,{children:"[prophet_accuracy, rf_accuracy, ridge_accuracy, xgb_accuracy]"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Softmax transformation"}),": Convert accuracies to probabilities"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Priority enforcement"}),": Prophet gets first position in array"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"prophet-priority-mechanism",children:"Prophet Priority Mechanism"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Prophet accuracy is placed first in the accuracy array"}),"\n",(0,s.jsx)(n.li,{children:"Softmax function naturally gives higher weight to first elements"}),"\n",(0,s.jsx)(n.li,{children:"This ensures Prophet gets the highest weight regardless of absolute performance"}),"\n",(0,s.jsx)(n.li,{children:"Maintains Prophet's time series forecasting advantages"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"error-handling",children:"Error Handling"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Epsilon added to prevent division by zero"}),"\n",(0,s.jsx)(n.li,{children:"Minimum accuracy threshold ensures all models get some weight"}),"\n",(0,s.jsx)(n.li,{children:"NaN handling for edge cases"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Cross-validation is performed once during training"}),"\n",(0,s.jsx)(n.li,{children:"Weights are cached and reused for predictions"}),"\n",(0,s.jsx)(n.li,{children:"No additional computational overhead during inference"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,s.jsx)(n.p,{children:"The dynamic weighted ensemble is automatically used in the main prediction pipeline. The API response now includes:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "ensemble_weights": {\n    "prophet_weight": 0.312,\n    "rf_weight": 0.284,\n    "ridge_weight": 0.268,\n    "xgb_weight": 0.136\n  },\n  "predictions": [\n    {\n      "model_weights": {\n        "prophet_weight": 0.312,\n        "rf_weight": 0.284,\n        "ridge_weight": 0.268,\n        "xgb_weight": 0.136\n      }\n    }\n  ]\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"testing",children:"Testing"}),"\n",(0,s.jsx)(n.p,{children:"The system includes comprehensive testing for dynamic weighting:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Test different accuracy scenarios\nscenarios = [\n    ("High Prophet Accuracy", 95.0),\n    ("Medium Prophet Accuracy", 85.0),\n    ("Low Prophet Accuracy", 75.0),\n    ("Very Low Prophet Accuracy", 65.0)\n]\n\n# Prophet should always get highest weight\nassert prophet_weight >= max(other_weights)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"future-enhancements",children:"Future Enhancements"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Adaptive Priority"}),": Adjust Prophet priority based on data characteristics"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Model Selection"}),": Automatically exclude poorly performing models"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Confidence Intervals"}),": Weight-based uncertainty quantification"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Online Learning"}),": Update weights as new data becomes available"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Seasonal Weighting"}),": Different weights for different seasons/periods"]}),"\n"]})]})}function h(e={}){let{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},65:function(e,n,i){i.d(n,{Z:()=>l,a:()=>c});var r=i(7294);let s={},t=r.createContext(s);function c(e){let n=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);