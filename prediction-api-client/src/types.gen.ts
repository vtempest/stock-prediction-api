// This file is auto-generated by @hey-api/openapi-ts

/**
 * Facility
 * Facility information from metadata
 */
export type Facility = {
    /**
     * Facility Name
     * Unique facility identifier
     */
    name: string;
    /**
     * Address
     * Facility address
     */
    address: string;
    /**
     * Latitude
     * Geographic latitude
     */
    latitude: number;
    /**
     * Longitude
     * Geographic longitude
     */
    longitude: number;
    /**
     * Start Date
     * Facility start date
     */
    start: string;
};

/**
 * Facility Name
 * Available facility names
 */
export type FacilityName = 'ssdairy' | 'ackerman' | 'doubled' | 'krblount' | 'acmachado' | 'albertmendes' | 'trinkler' | 'wirkstrom' | 'alamo' | 'petersen' | 'hilmar';

/**
 * Feature Configuration
 * Configuration object for feature engineering and model training parameters
 */
export type FeatureConfig = {
    facility_name: FacilityName;
    /**
     * Time Features
     * Include time-based features such as hour, day, month, seasonality
     */
    time_features?: boolean;
    /**
     * Weather Features
     * Include weather-related features and weather interactions
     */
    weather_features?: boolean;
    /**
     * Rolling Features
     * Include rolling window statistics (mean, std, min, max)
     */
    rolling_features?: boolean;
    /**
     * Lag Features
     * Include lagged values of energy consumption
     */
    lag_features?: boolean;
    /**
     * Interaction Features
     * Include feature interactions (e.g., temperature * humidity)
     */
    interaction_features?: boolean;
    /**
     * Rolling Windows
     * List of rolling window sizes in days for statistical features
     */
    windows?: Array<number>;
    /**
     * Lag Periods
     * List of lag periods in days for historical energy values
     */
    lags?: Array<number>;
    /**
     * Custom Start Date
     * Custom start date for predictions (YYYY-MM-DD format)
     */
    custom_start_date?: string | null;
    /**
     * Custom End Date
     * Custom end date for predictions (YYYY-MM-DD format)
     */
    custom_end_date?: string | null;
};

/**
 * Prediction Response
 * Response containing predictions and validation results
 */
export type PredictionResponse = {
    /**
     * Predictions
     * List of energy consumption predictions
     */
    predictions?: Array<Prediction>;
    /**
     * Cross Validation Results
     * Model performance metrics from cross-validation
     */
    cross_validation_results?: Array<ValidationResult>;
    /**
     * May Validation Results
     * Model performance metrics for May predictions
     */
    may_validation_results?: Array<ValidationResult>;
    feature_config?: FeatureConfig;
};

/**
 * Prediction
 * Individual energy consumption prediction
 */
export type Prediction = {
    /**
     * Date
     * Prediction date
     */
    date?: string;
    /**
     * Predicted Energy (Millions)
     * Ensemble prediction in millions
     */
    predicted_energy_millions?: number;
    /**
     * Prophet Prediction
     * Prophet model prediction
     */
    prophet_prediction?: number;
    /**
     * Random Forest Prediction
     * Random Forest model prediction
     */
    rf_prediction?: number;
    /**
     * Ridge Prediction
     * Ridge Regression model prediction
     */
    ridge_prediction?: number;
    /**
     * Ensemble Prediction
     * Weighted ensemble prediction
     */
    ensemble_prediction?: number;
    /**
     * Prediction Lower Bound
     * Lower bound of prediction interval
     */
    prediction_lower?: number;
    /**
     * Prediction Upper Bound
     * Upper bound of prediction interval
     */
    prediction_upper?: number;
    /**
     * Actual Energy (Millions)
     * Actual energy consumption if available
     */
    actual_energy_millions?: number | null;
    /**
     * Error
     * Prediction error if actual data available
     */
    error?: number | null;
    /**
     * Percent Error
     * Percentage error if actual data available
     */
    percent_error?: number | null;
    /**
     * Weather Data
     * Weather information for the prediction date
     */
    weather_data?: {
        /**
         * Temperature 2m Mean
         * Mean temperature at 2 meters
         */
        temperature_2m_mean?: number;
    };
};

/**
 * Validation Result
 * Model validation metrics
 */
export type ValidationResult = {
    /**
     * Model
     * Model name
     */
    model?: string;
    /**
     * Mean Absolute Error
     * Mean absolute error
     */
    mae?: number;
    /**
     * Root Mean Square Error
     * Root mean square error
     */
    rmse?: number;
    /**
     * RÂ² Score
     * Coefficient of determination
     */
    r2_score?: number;
    /**
     * Accuracy
     * Model accuracy percentage
     */
    accuracy?: number;
};

/**
 * Validation Error
 * Validation error response
 */
export type ValidationError = {
    /**
     * Detail
     * Error details
     */
    detail?: Array<{
        /**
         * Location
         * Error location
         */
        loc?: Array<string | number>;
        /**
         * Message
         * Error message
         */
        msg?: string;
        /**
         * Type
         * Error type
         */
        type?: string;
    }>;
};

/**
 * HTTP Error
 * HTTP error response
 */
export type HttpError = {
    /**
     * Detail
     * Error details
     */
    detail?: string;
    /**
     * Error Type
     * Type of error
     */
    error_type?: string;
    /**
     * Path
     * Request path
     */
    path?: string;
};

export type PredictStatisticsData = {
    body: FeatureConfig;
    path?: never;
    query?: never;
    url: '/predict';
};

export type PredictStatisticsErrors = {
    /**
     * Validation Error
     */
    422: ValidationError;
    /**
     * Internal Server Error
     */
    500: HttpError;
};

export type PredictStatisticsError = PredictStatisticsErrors[keyof PredictStatisticsErrors];

export type PredictStatisticsResponses = {
    /**
     * Successful prediction generation
     */
    200: PredictionResponse;
};

export type PredictStatisticsResponse = PredictStatisticsResponses[keyof PredictStatisticsResponses];

export type GetFacilitiesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/facilities';
};

export type GetFacilitiesResponses = {
    /**
     * List of available facilities
     */
    200: Array<Facility>;
};

export type GetFacilitiesResponse = GetFacilitiesResponses[keyof GetFacilitiesResponses];

export type GetDocumentationData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/docs';
};

export type GetDocumentationResponses = {
    /**
     * API documentation page
     */
    200: string;
};

export type GetDocumentationResponse = GetDocumentationResponses[keyof GetDocumentationResponses];

export type ClientOptions = {
    baseUrl: 'http://localhost:8000' | (string & {});
};